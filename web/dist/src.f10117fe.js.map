{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADOA,IAAA,IAAA;ACLA,ADKA,ICLM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;AAAE,ADKxB,ECLwB,IAAI,EAAE,IDK9B,CCLsB;AAAe,ADQjC,ECRiC,GAAG,EAAE,IDQtC,IAAA,CAAoB,IAApB,EAAmC;ACRjB,ADQE,CCRX,CAAb,ODQwB,IAAA,GAAA,IAAA;ACNxB,ADII,ICJA,CAAC,EAAL,CAAQ,CDIJ,MAAA,CCJJ,EAAkB,ADI0B,EAAxC,UCJc;AACd,ADKuC,ECLvC,OAAO,CAAC,GAAR,CAAY,WAAZ;AAEH,CAHD;AAKA,ADGI,EAAA,ECHA,CAAC,CDGD,CCHJ,ADGI,CCHI,QAAR,ADGI,CAAA,CCHc,EDGd,GAAA,OCHc,GDGV,QAAJ,EAAoB;ACFpB,ADGI,ECHJ,OAAO,CAAC,CDGG,ECHX,CAAY,EDGI,IAAL,CAAU,ICHrB,IDGW,CAAP;ACFP,ADGI,CCLL,EDGI;ACCJ,IAAI,CAAC,EAAL,CAAQ,MAAR,EAAgB,YAAA;AACZ,ADEA,ECFA,ADEA,IAAA,CAAA,ECFO,CAAC,GAAR,CAAY,EDEZ,CAAA,GAAA,GAAA,UAAI,CCFJ,KDEA,EAAqB;ACDxB,ADEO,CCJR,GDIQ,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAzB;ACAR,ADCK,GAFD,CCCA,CAAC,OAAL,CAAa,QAAb;;ADGI,EAAA,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;AACpC,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,SAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;AACH,GAJD;;AAMA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAyB;AACrB,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB;;AAEA,QAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAArC,EAAwC;AACpC;AACH;;AAED,IAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,QAAA,EAAQ;AACrB,MAAA,QAAQ;AACX,KAFD;AAGH,GAVD;;AAWJ,SAAA,IAAA;AA9BA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps {\n    name?: string; \n    age?: number;\n}\n\ntype Callback = () => void;\n\nexport class User {\n    events: { [key: string]: Callback[] } = {};\n\n    constructor(private data: UserProps) {}\n\n    get(propName: string): (number | string) {\n        return this.data[propName];\n    }\n\n    set(update: UserProps): void {\n        Object.assign(this.data, update);\n    }\n\n    on(eventName: string, callback: Callback): void {\n        const handlers = this.events[eventName] || [];\n        handlers.push(callback);\n        this.events[eventName] = handlers;\n    }\n\n    trigger(eventName: string): void {\n        const handlers = this.events[eventName];\n\n        if (!handlers || handlers.length === 0) {\n            return;\n        }\n\n        handlers.forEach(callback => {\n            callback();\n        });\n    }\n}","import { User } from './models/User';\n\nconst user = new User({ name: 'Tom', age: 20 });\n\nuser.on('change', () => {\n    console.log('Change #1');\n    \n});\n\nuser.on('change', () => {\n    console.log('Change #1');\n});\n\nuser.on('save', () => {\n    console.log('Save was triggered');\n});\n\nuser.trigger('change');\n"]}